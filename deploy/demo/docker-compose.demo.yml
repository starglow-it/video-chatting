version: '3.7'

networks:
  traefikpublic:
    external:
      name: liveoffice_traefikpublic
  liveoffice_demo:

services:
  mongo:
    container_name: demo_mongodb
    image: mongo:5.0
    command: [ "--replSet", "rs0", "--bind_ip_all" ]
    hostname: mongo
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s
    restart: unless-stopped
    ports:
      - '127.0.0.1:56100:27017'
    volumes:
      - /data/liveoffice/mongo:/data/db
    networks:
      - liveoffice_demo

  rabbit:
    container_name: demo_rabbitmq
    image: rabbitmq:3-management
    restart: unless-stopped
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbituser
      - RABBITMQ_DEFAULT_PASS=rabbitpass
      - RABBITMQ_DEFAULT_HOST=rabbitmq
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management path_prefix "/rabbit"
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - /data/liveoffice/rabbit:/var/lib/rabbitmq
    networks:
      - liveoffice_demo

  livekit-service:
    container_name: demo_livekit
    build:
      context: ../../services/
      dockerfile: ./livekit-service/Dockerfile
      args:
        - LIVEKIT_IP
        - LIVEKIT_API_KEY
        - LIVEKIT_API_SECRET
    restart: unless-stopped
    ports:
      - "7890:7880"
      - "7891:7881"
      - "7892:7882/udp"
      - "6790:6789"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=liveoffice_traefikpublic"
      - "traefik.http.routers.livekit.rule=Host(`livekit.demo.theliveoffice.com`)"
      - "traefik.http.routers.livekit.entrypoints=https"
      - "traefik.http.routers.livekit.tls=true"
      - "traefik.http.services.livekit.loadbalancer.server.port=7880"
      - "io.portainer.accesscontrol.public"
    networks:
      - liveoffice_demo
      - traefikpublic

  frontend-service:
    container_name: liveoffice_demo_frontend
    build:
      context: ../../
      dockerfile: services/frontend-service/Dockerfile
      args:
        - VULTR_STORAGE_HOSTNAME=ewr1.vultrobjects.com
    depends_on:
      - gateway-service
    restart: unless-stopped
    ports:
      - '8000:8000'
    environment:
      - WAIT_HOSTS=gateway-service:3000
      - WAIT_TIMEOUT=60000
      - FRONTEND_URL
      - GATEWAY_PORT=3000
      - GATEWAY_HOST=gateway-service
      - TURN_URL
      - TURN_PASSWORD
      - TURN_USERNAME
      - TURN_PORT
      - LIVEKIT_WSS
      - MEETING_SOCKET_URL
      - DEFAULT_SERVER_IP
      - VULTR_STORAGE_HOSTNAME
      - STRIPE_PUBLIC_API_KEY
      - BASE_ENV_DOMAIN
      - SUPPORT_EMAIL
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=liveoffice_traefikpublic"
      - "traefik.http.routers.frontend.rule=Host(`demo.theliveoffice.com`)"
      - "traefik.http.routers.frontend.entrypoints=https"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=8000"
    networks:
      - traefikpublic
      - liveoffice_demo

  gateway-service:
    container_name: demo_gateway
    build:
      context: ../../
      dockerfile: ./services/gateway-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    ports:
      - '3000:3000'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=liveoffice_traefikpublic"
      - "traefik.http.routers.gateway.rule=Host(`demo.theliveoffice.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.gateway.entrypoints=https"
      - "traefik.http.routers.gateway.tls=true"
      - "traefik.http.services.gateway.loadbalancer.server.port=3000"
    networks:
      - traefikpublic
      - liveoffice_demo

  socket-service:
    container_name: demo_socket
    build:
      context: ../../
      dockerfile: ./services/socket-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    ports:
      - '8082:8080'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=liveoffice_traefikpublic"
      - "traefik.http.routers.socket.rule=Host(`demo.theliveoffice.com`) && PathPrefix(`/socket.io`)"
      - "traefik.http.routers.socket.entrypoints=https"
      - "traefik.http.routers.socket.tls=true"
      - "traefik.http.services.socket.loadbalancer.server.port=8080"
    networks:
      - traefikpublic
      - liveoffice_demo

  core-service:
    container_name: demo_core
    build:
      context: ../../
      dockerfile: ./services/core-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    networks:
      - liveoffice_demo

  auth-service:
    container_name: demo_auth
    build:
      context: ../../
      dockerfile: ./services/auth-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    networks:
      - liveoffice_demo

  meeting-socket-service:
    container_name: demo_meeting-socket
    build:
      context: ../../
      dockerfile: ./services/meeting-socket-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    ports:
      - '8180:8180'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=liveoffice_traefikpublic"
      - "traefik.http.routers.meeting_socket.rule=Host(`socket.demo.theliveoffice.com`)"
      - "traefik.http.routers.meeting_socket.entrypoints=https"
      - "traefik.http.routers.meeting_socket.tls=true"
      - "traefik.http.services.meeting_socket.loadbalancer.server.port=8180"
      - "io.portainer.accesscontrol.public"
    networks:
      - liveoffice_demo
      - traefikpublic

  payment-service:
    container_name: demo_payment
    build:
      context: ../../
      dockerfile: ./services/payment-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    ports:
      - "5000:5000"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=liveoffice_traefikpublic"
      - "traefik.http.routers.payments.rule=Host(`demo.theliveoffice.com`) && PathPrefix(`/payments`)"
      - "traefik.http.routers.payments.entrypoints=https"
      - "traefik.http.routers.payments.tls=true"
      - "traefik.http.services.payments.loadbalancer.server.port=5000"
    networks:
      - liveoffice_demo
      - traefikpublic

  notification-service:
    container_name: demo_notifications
    build:
      context: ../../
      dockerfile: ./services/notification-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    networks:
      - liveoffice_demo

  media-server-service:
    container_name: demo_media-server
    build:
      context: ../../
      dockerfile: ./services/media-server-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    networks:
      - liveoffice_demo

  scaling-service:
    container_name: demo_scaling
    build:
      context: ../../
      dockerfile: ./services/scaling-service/Dockerfile
    restart: unless-stopped
    environment:
      WAIT_HOSTS: config-service:4000,rabbitmq:5672
      WAIT_TIMEOUT: 60000
    networks:
      - liveoffice_demo

  config-service:
    container_name: demo_config
    build:
      context: ../../
      dockerfile: ./services/config-service/Dockerfile
    restart: always
    depends_on:
      - mongo
      - rabbit
    environment:
      - RABBIT_MQ_CORE_QUEUE=rabbitMqCoreQueue
      - RABBIT_MQ_SOCKET_QUEUE=rabbitMqSocketQueue
      - RABBIT_MQ_AUTH_QUEUE=rabbitMqAuthQueue
      - RABBIT_MQ_PAYMENT_QUEUE=rabbitMqPaymentQueue
      - RABBIT_MQ_NOTIFICATIONS_QUEUE=rabbitMqNotificationsQueue
      - RABBIT_MQ_MEDIA_SERVER_QUEUE=rabbitMqMediaServerQueue
      - RABBIT_MQ_SCALING_QUEUE=rabbitMqScalingQueue
      - RABBIT_MQ_USER
      - RABBIT_MQ_PASS
      - RABBIT_MQ_HOST
      - RABBIT_MQ_CORE_HOST=${DEFAULT_SERVER_IP}
      - RABBIT_MQ_CORE_PORT
      - VULTR_UPLOAD_BUCKET
      - VULTR_STORAGE_HOSTNAME
      - VULTR_SECRET_ACCESS_KEY
      - VULTR_ACCESS_KEY
      - VULTR_SNAPSHOT_ID
      - VULTR_API_KEY
      - STRIPE_API_KEY
      - STRIPE_WEBHOOK_SECRET
      - STRIPE_EXPRESS_WEBHOOK_SECRET
      - LIVEKIT_API_KEY
      - LIVEKIT_API_SECRET
      - LIVEKIT_HOST
      - NODE_ENV=production
      - PORT=4000
      - EMAIL_SERVICE
      - ENVIRONMENT=demo
      - GATEWAY_PORT=3000
      - FRONTEND_URL
      - JWT_SECRET
      - MONGO_URI
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_USER
      - SMTP_PASS
      - DEFAULT_SERVER_IP
      - DEFAULT_DOMAIN
      - MANDRILL_API_KEY
      - SUPPORT_SCALING
      - NUMBER_OF_ACTIVE_SERVERS
      - SUPPORT_EMAIL
      - ADMIN_EMAIL
      - ADMIN_PASSWORD
    networks:
      - liveoffice_demo