version: '3.7'

networks:
  traefikpublic:
    external:
      name: liveoffice_traefikpublic
  liveoffice_demo:

services:
  mongo:
    image: mongo:5.0
    command: [ "--replSet", "rs0", "--bind_ip_all" ]
    hostname: mongo
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s
    restart: always
    ports:
      - '127.0.0.1:56100:27017'
    volumes:
      - /data/liveoffice/mongo:/data/db
    networks:
      - liveoffice_demo

  rabbit:
    image: rabbitmq:3-management
    restart: always
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbituser
      - RABBITMQ_DEFAULT_PASS=rabbitpass
      - RABBITMQ_DEFAULT_HOST=rabbitmq
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management path_prefix "/rabbit"
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - /data/liveoffice/rabbit:/var/lib/rabbitmq
    networks:
      - liveoffice_demo

  frontend-service:
    build:
      context: ../../frontend-service
      dockerfile: Dockerfile
    depends_on:
      - gateway-service
    restart: always
    ports:
      - '8000:8000'
    environment:
      - FRONTEND_URL
      - GATEWAY_PORT=3000
      - GATEWAY_HOST=gateway-service
      - TURN_URL
      - TURN_PASSWORD
      - TURN_USERNAME
      - TURN_PORT
      - LIVEKIT_WSS
      - MEETING_SOCKET_URL
      - DEFAULT_SERVER_IP
      - VULTR_STORAGE_HOSTNAME
      - STRIPE_PUBLIC_API_KEY
      - BASE_ENV_DOMAIN
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=http"
      - "traefik.http.routers.frontend.rule=Host(`demo.theliveoffice.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=8000"
    networks:
      - traefikpublic
      - liveoffice_demo

  gateway-service:
    build:
      context: ../../
      dockerfile: ./gateway-service/Dockerfile
    ports:
      - '3000:3000'
    restart: always
    depends_on:
      - mongo
      - rabbit
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=Host(`demo.theliveoffice.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.gateway.entrypoints=http"
      - "traefik.http.services.gateway.loadbalancer.server.port=3000"
    networks:
      - traefikpublic
      - liveoffice_demo

  socket-service:
    build:
      context: ../../
      dockerfile: ./socket-service/Dockerfile
    ports:
      - '8082:8080'
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.socket.rule=Host(`demo.theliveoffice.com`) && PathPrefix(`/socket.io`)"
      - "traefik.http.routers.socket.entrypoints=http"
      - "traefik.http.services.socket.loadbalancer.server.port=8080"
    networks:
      - traefikpublic
      - liveoffice_demo

  core-service:
    build:
      context: ../../
      dockerfile: ./core-service/Dockerfile
    restart: always
    depends_on:
      - config-service
    networks:
      - liveoffice_demo

  auth-service:
    build:
      context: ../../
      dockerfile: ./auth-service/Dockerfile
    restart: always
    depends_on:
      - config-service
    networks:
      - liveoffice_demo

  notifications-service:
    build:
      context: ../../
      dockerfile: ./notifications-service/Dockerfile
    restart: always
    depends_on:
      - config-service
    networks:
      - liveoffice_demo

  payment-service:
    build:
      context: ../../
      dockerfile: ./payment-service/Dockerfile
    restart: always
    depends_on:
      - config-service
    networks:
      - liveoffice_demo

  config-service:
    build:
      context: ../../
      dockerfile: ./config-service/Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=4000
      - EMAIL_SERVICE
      - ENVIRONMENT=demo
      - RABBIT_MQ_CORE_QUEUE=rabbitMqCoreQueue
      - RABBIT_MQ_SOCKET_QUEUE=rabbitMqSocketQueue
      - RABBIT_MQ_AUTH_QUEUE=rabbitMqAuthQueue
      - RABBIT_MQ_PAYMENT_QUEUE=rabbitMqPaymentQueue
      - RABBIT_MQ_NOTIFICATIONS_QUEUE=rabbitMqNotificationsQueue
      - RABBIT_MQ_MEDIA_SERVER_QUEUE=rabbitMqMediaServerQueue
      - RABBIT_MQ_SCALING_QUEUE=rabbitMqScalingQueue
      - RABBIT_MQ_USER
      - RABBIT_MQ_PASS
      - RABBIT_MQ_HOST
      - GATEWAY_PORT=3000
      - FRONTEND_URL
      - JWT_SECRET
      - MONGO_URI
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_USER
      - SMTP_PASS
      - DEFAULT_SERVER_IP
      - DEFAULT_DOMAIN
      - VULTR_UPLOAD_BUCKET
      - VULTR_STORAGE_HOSTNAME
      - VULTR_SECRET_ACCESS_KEY
      - VULTR_ACCESS_KEY
      - STRIPE_API_KEY
      - STRIPE_WEBHOOK_SECRET
      - STRIPE_EXPRESS_WEBHOOK_SECRET
      - MANDRILL_API_KEY
      - SUPPORT_SCALING
      - NUMBER_OF_ACTIVE_SERVERS
    depends_on:
      - mongo
      - rabbit
    networks:
      - liveoffice_demo