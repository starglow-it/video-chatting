# I split update of whole job to by-service job because of errors that might
# happen during the build and it would fail whole pipeline
# so in this case those containers that have some unexpected errors would fail only of that container

.staging-test:
  stage: update
  timeout: 3 hours
  extends:
    - .docker-base
  tags: [liveoffice-deploy]
  only:
    variables:
      - $CI_COMMIT_REF_NAME =~ /^(testing)$/
  except:
    variables:
      - $CLIENT_PUSH_ACTIVE == "true"

Update Test Traefik:
  stage: update_traefik
  extends:
    - .staging-test
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice -f docker-compose.traefik.yml up -d --build --force-recreate --remove-orphans
  interruptible: true

update:test:
  extends:
    - .staging-test
  only: [testing]
  stage: update_test
  when: manual
  allow_failure: false
  script:
    - echo "Start update test"

update:other:test:
  extends:
    - .staging-test
  stage: update_staging_services
  only: [ testing ]
  needs: [ "update:test" ]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps rabbit mongo livekit-service --force-recreate --remove-orphans

update:config:test:
  extends:
    - .staging-test
  stage: update_staging_config
  only: [ testing ]
  needs: [ "update:other:test" ]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps config-service --force-recreate --remove-orphans

update:core:test:
  extends:
    - .staging-test
  only: [ testing ]
  needs: ["update:config:test"]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps core-service --force-recreate --remove-orphans

update:gateway:test:
  extends:
    - .staging-test
  only: [testing]
  needs: [ "update:config:test" ]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps gateway-service --force-recreate --remove-orphans

update:auth:test:
  extends:
    - .staging-test
  only: [testing]
  needs: [ "update:config:test" ]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps auth-service --force-recreate --remove-orphans

update:notification:test:
  extends:
    - .staging-test
  only: [testing]
  needs: [ "update:config:test" ]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps notification-service --force-recreate --remove-orphans

update:frontend-admin:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps frontend-admin-service --force-recreate --remove-orphans

update:frontend:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps frontend-service --force-recreate --remove-orphans

update:media-server:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps media-server-service --force-recreate --remove-orphans

update:meeting-socket:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps meeting-socket-service --force-recreate --remove-orphans

update:payment:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps payment-service --force-recreate --remove-orphans

update:scaling:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps scaling-service --force-recreate --remove-orphans

update:socket:test:
  extends:
    - .staging-test
  needs: [ "update:config:test" ]
  only: [testing]
  script:
    - cd deploy/staging
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker-compose --compatibility -p liveoffice_${CI_COMMIT_REF_NAME} -f docker-compose.yml -f docker-compose.${CI_COMMIT_REF_NAME}.yml up -d --build --no-deps socket-service --force-recreate --remove-orphans

